[ 2 5 1 2 1 5 1 1 ]
[ 2 5 1 2 1 5 1 1 1 2 3 4 ]
popped 2
[ 5 1 2 1 5 1 1 1 2 3 4 ]
after remove-all(2):
[ 5 1 1 5 1 1 1 3 4 ]

print list2 now:	[ dd cc bb aa ]
print list2 reverse	[ aa bb cc dd ]
list  sorted?  0
list2 sorted?  0
list3 sorted?  1
fiveZ has this mandy 0s:	list2 has this many aa:	list3 has this many bb:	
popping back NODE: pop_back 
current list: [ 5 1 1 5 1 1 1 3 4 ]
removed back node
data stored: 4
list after popped value: 
[ 5 1 1 5 1 1 1 3 ]

Printing list in reverse RECURSIVLY!
 3 1 1 1 5 1 1 5
PRINTING LIST original: 
[ 5 1 1 5 1 1 1 3 ]

PRINTING LIST AFTER reverse() FUNCT, reversing the list
[ 3 1 1 1 5 1 1 5 ]
TESTING fast_remove_all(1)
[ 3 1 1 1 5 1 1 5 ]
TESTING insert_sorted(sortedList)
original: [ 1 3 5 7 9 ]

adding 5: [ 1 3 5 6 7 9 ]
[ -22 1 3 5 6 7 9 ]
[ -22 1 3 5 6 7 9 66 ]

TESTING concat(list) 
list2: [ dd cc bb aa ]

list3: [ aa bb cc dd ]

list2.concat(list3): 
after concat list2 [ dd cc bb aa aa bb cc dd ]

after concat list3 [ ]
TESTING compare_with(list) 
other list is lexically before calling list
TESTING merge_with() function
list 8: [ 3 2 2 ]

list 9: [ 1 3 0 ]

AFTER MERGE: 
list 8: [ 3 2 2 1 3 0 ]

list 9: [ ]

